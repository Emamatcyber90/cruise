1. Prepare and run 'configure':

(If using containers, run ./prepare && ./configure --prefix=$PWD && make && make install
inside the "container" directory before proceeding to the next step)

# debug
use -q ic-11.1.046 
./prepare
./configure \
  --prefix=`pwd`/install \
  --with-jobid-env=SLURM_JOBID \
  --enable-ld-preload \
  CC=mpiicc CFLAGS="-g -O0"

# optimized
use -q ic-11.1.046 
./prepare
./configure \
  --prefix=`pwd`/install \
  --with-jobid-env=SLURM_JOBID \
  --enable-ld-preload \
  CC=mpiicc CFLAGS="-O3"


--with-mem-align=8

	Really not needed, but the darshan build system that I use will
	complain otherwise. 

--with-log-path

	Again, really not needed. But there are some darshan logging macros
	lying around in the code that are yet to be stripped out. Just
	create an empty directory and pass it to this flag.

 --enable-ld-preload

	This is needed to generate the .so lib that we will preload
	(if not statically building)

2. Build library

make clean
make
make install

3. Run ./install/bin/scrmfs-mk-log-dirs.pl
	
	So that the darshan-specific folder structure is created.
	I will strip all this stuff out once I get back to school.

4. Run "./install/bin/scrmfs-config --pre-ld-flags"
   and "./install/bin/scrmfs-config --post-ld-flags"

	Copy the output of each of these commands to a separate variable,'
	say $(PRE_SCRMFS_FLAGS) and $(POST_SCRMFS_FLAGS)

5. Compile the test program

	If you're compiling test_ramdisk.c for instance, you would do
	something like this in your makefile:
	
setenv PRE_SCRMFS_FLAGS `./install/bin/scrmfs-config --pre-ld-flags`
setenv POST_SCRMFS_FLAGS `./install/bin/scrmfs-config --post-ld-flags`
mpicc $PRE_SCRMFS_FLAGS -g -O0 -o test_ramdisk test_ramdisk.c $POST_SCRMFS_FLAGS

	If you are running test_interpose, you can do something similar in
	makefile.examples.

6. If you don't want to statically build, but just preload instead, preload this shared object:

	LD_PRELOAD=$INSTALL_PATH/lib/libscrmfs.so ./test_interpose

7. Use the "ipcs" command to list the currently opened shm segments.
   Use "ipcrm -M key" to delete it after a run.

./ipc_cleanup

